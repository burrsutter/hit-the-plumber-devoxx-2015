// Generated by CoffeeScript 1.10.0
var Leak, Player, eb, players,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Config.title = ['MEMLEAK', "PLUMBER"];

eb = new EventBus("http://" + window.location.host + "/eventbus");

players = {};

eb.onopen = function() {
  return eb.registerHandler('memleak-hunt', function(err, msg) {
    var p;
    switch (msg.body.action) {
      case 'join':
        p = new Player();
        p.playerId = msg.body.playerId;
        return players[msg.body.playerId] = p;
      case 'shoot':
        p = players[msg.body.playerId];
        if (p) {
          p.decay = 5;
          p.pos.x = msg.body.x;
          p.pos.y = msg.body.y;
          return p.drawing.setColor(Color.white).addRect(0.05);
        }
    }
  });
};

window.initialize = function() {
  var i, j, results;
  Sound.setSeed(1234);
  this.drums = [];
  results = [];
  for (i = j = 1; j <= 4; i = ++j) {
    results.push(this.drums.push(Game.newSound().setDrum().setDrumPattern()));
  }
  return results;
};

window.begin = function() {
  var drum, i, j, k, len, ref, results;
  ref = this.drums;
  for (j = 0, len = ref.length; j < len; j++) {
    drum = ref[j];
    drum.playPattern();
  }
  results = [];
  for (i = k = 1; k <= 30; i = ++k) {
    results.push(new Leak);
  }
  return results;
};

window.update = function() {
  return Actor.scroll(Leak, 0, 0.002, 0, 0, 0, 1);
};

Player = (function(superClass) {
  extend(Player, superClass);

  function Player() {
    return Player.__super__.constructor.apply(this, arguments);
  }

  Player.prototype.initialize = function() {
    return Player.destroySe = this.newSound().setVolume(3).setDrum();
  };

  Player.prototype.update = function() {
    if (!--this.decay) {
      this.drawing.clear();
    }
    if (this.onCollision(Leak)) {
      this.newParticle().setColor(Color.red).setNumber(5);
      this.drawing.clear();
      Player.destroySe.playNow();
      return eb.send('memleak-hunt-score', {
        action: 'hit',
        playerId: this.playerId
      });
    }
  };

  return Player;

})(Actor);

Leak = (function(superClass) {
  extend(Leak, superClass);

  function Leak() {
    return Leak.__super__.constructor.apply(this, arguments);
  }

  Leak.prototype.initialize = function() {
    return this.setDisplayPriority(0.5);
  };

  Leak.prototype.begin = function() {
    this.drawing.setColor(Color.yellow).addRect(0.05);
    return this.pos.setXy(0..rr(1), 0..rr(1));
  };

  return Leak;

})(Actor);

//# sourceMappingURL=spectator.js.map
